<?php

set_time_limit(60);

//get string from ascii values
function asciiToString($ascii){
	//pad with zeros at msd if required (leading 0's may have been cut off) after decryption
	while (strlen($ascii)%3 !== 0){
		$ascii = "0".$ascii;
	}
	
	//to string
	$alength = strlen($ascii); 
	$string = "";
	$code = "";
	for ($i = 0; $i < $alength; $i += 3){
		$code = $ascii[$i].$ascii[$i+1].$ascii[$i+2];
		$string .= chr(intval($code));
	}
	return $string;
}

//get ascii from string value
function stringToAscii($string){
	$ascii = "";
	$slength = strlen($string);
	for ($i = 0; $i < $slength; $i++){
		$ascii .= str_pad(strval(ord($string[$i])), 3, "0", STR_PAD_LEFT);
	}
	return $ascii;
}

//convert decimal to binary
function decToBin($decNum){
	bcscale(0);
	$binNum = '';
	do
	{
		$binNum = bcmod($decNum,'2').$binNum;
		$decNum = bcdiv($decNum,'2');
	}while (bccomp($decNum,'0'));

	return($binNum);
}

//encryption: compute m^e = c (mod n), i.e. find the remainder using square and multiply 
//decryption: compute c^d = m (mod n)
function sam($ain, $yin, $modin){ //a=2, y=50, mod=61
	$a = $ain; //base
	$y = $yin; //final exponent
	$x = "1"; //current exponent
	$mod = $modin; //modulus to work under
	$r = bcmod(bcpow($a, $x), $mod); //first remainder r1
	$rarr = array(); //store all remainders in this array
	$rarr[$x] = $r;

	$x = bcmul($x, "2"); //make x the next power of 2 (1, 2, 4, 8...)
	
	//determine largest power of 2 $a can be raised to and find its remainder (mod $mod)
	while (bccomp($y, $x) == 1){ //while y > x
		$r = bcmod(bcpow($r, "2"), $mod); // find remainder of r^2 (mod $mod)	
		$rarr[$x] = $r;
		$x = bcmul($x, "2"); //update x
	}

	if (bccomp($y, bcmul($x, "0.5")) == 1){
		//difference between current power and final power
		$diff = bcsub($y, bcmul($x, "0.5"));
		
		//express difference as a sum of powers of 2	
		$diff = strrev(decToBin($diff)); 

		//retrieve the remainder for each power of 2, multiply them together and find the remainder (mod $mod) (memory issues?)
		for ($i = 0; $i < strlen($diff); $i++){
			if ($diff[$i] == "1"){
				$r = bcmul($r, $rarr[bcpow("2", $i)]);
				$r = bcmod($r, $mod);
			}
		}
	}
	return $r;
}

//Martin's public key
$nMartin = "239255299284384349304725149856552492038598445886956658797340414572081315025316855599003056773010145489861807217942474066769254994889937350554812114599199747011822931003470188469755565575428252755498450043694308433269873821720504733262583005940196298951811543171416951549542705533417999736765774452030314635913103516225119401185982005668156650192848448135779911780427770251154346413709247810959979685820122190878080140819951259653464493002404315741219936122712441337048287859676453307655235582246940129654549936418104588280142515645148689690033053995534499764950491215574658031050257809925263610106291";
$eMartin = "51831672085074814178680269722598016921936838558306727005991561731670505910386509866184899294113023750765710594543251856658239666016521056714215727353889825219309912019100396570607753922542886645209401533085461587994461683838141339926725638136349726690307472237142348752101995510115124409635193574780938087738364459858781987481597603026016849697794677";

//my key pair
$e = "70001";
$d = "70398789194045636379205220353884817629250415827226696843794756433503298178833613542299838399878496388256403785484860608190768247101680130919396519673080028531895012359062436820409111850808926289136641367424372826508456483249594829136813761655766455300952056153089481158927379619198564045907873747512988671740765722492998661450442555169775438034226830740241374414345755384470633734979360326229343663067722544667785915149891804382009837260069160783522226866680278895364722794000361197998023626673425702846643968078561406630263364614494279345095080396101595219754409513058180302701498199997156099770953";
$n = "93970207893909244349581339956376399047808213994921932911835489590436374963131302802611093929100618314982962537426599432400785020887165074644153079089952234416330093439356425000294768290081912382553183180677196182991084670377843858632510204219238542342434401486831485652836953219242566678951929182710211112814088285766675617883558728614498106191860272830902263301662696435116921151368784623321239225249163136464056461458759987033140237947536694924129508736109981366387403862392519796813747413454078741178614512371076128370941186492075570632963227899973849624369811303131853033036747592905723992966357";

//initial message to send
$m = "Why has government been instituted at all? Because the passions of men will not conform to the dictates of reason and justice, without constraint."; 

//1. encrypt initial message with Martin's public key
//$c = sam($m, $eMartin, $nMartin); echo $c."<br>";

//2. decrypt Martin's reply
$replyCipher = "61546186113382918912366133214848510315867422871356299131914580554634666190545794414066311071033262251820067757697868830482190550277049482914372453638210832812962289282736849134133307996515142320044125866029652599237836414566171382408525094238295322241963208404457038087425241922036760962015486370526878259003592935119369332892137246943354620012702721402305295090560679458409985208315785139104997912585547866579850354540159457093653254290183698010801708143878377859666866535540000569901427333153260585947825387841073426150850149722770240088149375134300644319816206739198216251205485520873631099900149";
$reply = sam($replyCipher, $d, $n);
echo asciiToString($reply);

//3. encrypt final message to Martin
/*$msg = "Relax a little, do some exercise again. Maybe code a little? There's a poutine festival in Ottawa and I'm pretty stoked to go. Cheers!";
$msg = stringtoAscii($msg); 
$msgCipher = sam($msg, $eMartin, $nMartin);
echo $msgCipher;*/

//testing my key pair
/*echo "Message: ".$m."<br>"; 
$m = stringToAscii($m); echo "Plaintext: ".$m."<br>";
$c = sam($m, $e, $n); echo "Ciphertext: ".$c."<br>";
$mDecrypted = sam($c, $d, $n); echo "Decrypted ciphertext: ".$mDecrypted."<br>";
echo "Original message: ".asciiToString($mDecrypted); //note: padding occurs in the asciiToString() function*/


?>